import telebot
from telebot import types
import random
import setings
import datetime
import json

bot = telebot.TeleBot(setings.BOT_TOKEN)

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ü–∏—Ç–∞—Ç
user_data = {}
quotes = []

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def load_user_data():
    global user_data
    try:
        with open('user_data.json', 'r', encoding='utf-8') as file:
            user_data = json.load(file)
    except FileNotFoundError:
        user_data = {}
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–ª—é—á–µ–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for data in user_data.values():
        data.setdefault('name', 'nn')
        data.setdefault('tea_drink', 0)
        data.setdefault('kettle_failed', 30)

def save_user_data():
    with open('user_data.json', 'w', encoding='utf-8') as file:
        json.dump(user_data, file, ensure_ascii=False, indent=4)

def load_quotes():
    global quotes
    try:
        with open('quotes.json', 'r', encoding='utf-8') as file:
            quotes = json.load(file)
    except FileNotFoundError:
        quotes = []

def save_quotes():
    with open('quotes.json', 'w', encoding='utf-8') as file:
        json.dump(quotes, file, ensure_ascii=False, indent=4)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def add_user(user):
    user_id = str(user.id)
    user_data.setdefault(user_id, {})
    user_data[user_id].setdefault('name', user.first_name or 'nn')
    user_data[user_id].setdefault('tea_drink', 0)
    user_data[user_id].setdefault('kettle_failed', 30)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ
@bot.my_chat_member_handler()
def check_admin(message: types.ChatMemberUpdated):
    if message.chat.type in ['group', 'supergroup']:
        old_status = message.old_chat_member.status
        new_status = message.new_chat_member.status
        if old_status != 'administrator' and new_status == 'administrator':
            bot.send_message(chat_id=message.chat.id, text='–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç! –Ø —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —ç—Ç–æ–≥–æ —á–∞—Ç–∞.\n–ù–∞–ø–∏—à–∏—Ç–µ /info, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã.')

#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–º–∞–Ω–¥—ã "–í—ã–ø–∏—Ç—å —á–∞–π"
@bot.message_handler(func=lambda message: message.text and message.text.lower() == '–≤—ã–ø–∏—Ç—å —á–∞–π')
def tea(message: types.Message):
    user = message.from_user
    user_id = str(user.id)
    add_user(user)

    user_info = user_data[user_id]

    if user_info['kettle_failed'] > 0:
        if random.randint(1, 100) <= 25:
            user_info['kettle_failed'] -= 1
            if user_info['kettle_failed'] == 0:
                response = '–¢–´ –ë–´–õ –ò–ó–ë–†–ê–ù–ù–ò–ö–û–ú! –í–°–ï –î–£–ú–ê–õ–ò, –ß–¢–û –¢–´ –ë–£–î–ï–®–¨ –ó–ê–©–ò–©–ê–¢–¨ –ù–ê–° –û–¢ –ñ–ï–ù–©–ò–ù, –ê –ù–ï –ü–†–ò–ú–ö–ù–ï–®–¨ –ö –ù–ò–ú!'
            else:
                response = f'–ß–∞–π–Ω–∏–∫ –Ω–µ –≤—Å–∫–∏–ø–µ–ª ü§¨ –°–º–æ—Ç—Ä–∏, —á—Ç–æ–±—ã –¥–µ–≤—É—à–∫–∞ –Ω–µ –ø–æ—è–≤–∏–ª–∞—Å—å. –û—Å—Ç–∞–ª–æ—Å—å –Ω–µ –≤—ã–ø–∏—Ç—ã—Ö —á–∞—ë–≤: {user_info["kettle_failed"]}'
        else:
            tea_amount = random.randint(1, 300)
            user_info['tea_drink'] += tea_amount
            if tea_amount <= 150:
                response = (
                    f'–¢—ã –≤—ã–ø–∏–ª {tea_amount} —á–∞—è\n–í—ã–ø–∏—Ç–æ —á–∞—è –≤—Å–µ–≥–æ: {user_info["tea_drink"]}\n–û—Å—Ç–∞–ª–æ—Å—å –Ω–µ –≤—ã–ø–∏—Ç—ã—Ö —á–∞—ë–≤: {user_info["kettle_failed"]}'
                )
            else:
                response = (
                    f'–û–ú–ê–ì–ê–î –¢–´ –í–´–ü–ò–õ –ê–ñ {tea_amount} –õ –ß–ê–Ø!!!\n–í—ã–ø–∏—Ç–æ —á–∞—è –≤—Å–µ–≥–æ: {user_info["tea_drink"]}\n–û—Å—Ç–∞–ª–æ—Å—å –Ω–µ –≤—ã–ø–∏—Ç—ã—Ö —á–∞—ë–≤: {user_info["kettle_failed"]}'
                )
    else:
        response = '–¢–µ–±–µ —É–∂–µ –Ω–µ—Ç —Å–º—ã—Å–ª–∞ –ø–∏—Ç—å —á–∞–π, —Å–∏—Ç—Ö...'

    bot.reply_to(message, response)
    save_user_data()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–∏—Ñ–∫–∏
@bot.message_handler(content_types=['video', 'animation'])
def media(message: types.Message):
    gif = r'src\GIF\video_2024-11-17_11-43-49.mp4'
    try:
        with open(gif, 'rb') as file:
            bot.send_animation(message.chat.id, file)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–∏—Ñ–∫–∏: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@bot.message_handler(func=lambda message: True, content_types=['text', 'sticker', 'photo', 'video', 'audio', 'document', 'location', 'contact', 'video_note', 'voice'])
def all_message_handler(message: types.Message):
    user = message.from_user
    user_id = str(user.id)
    add_user(user)

    user_info = user_data[user_id]
    today = datetime.date.today()
    week = datetime.date.today().isocalendar()[1]
    month = datetime.date.today().month


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "/q" –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ü–∏—Ç–∞—Ç–∞–º–∏
@bot.message_handler(commands=['q'])
def quotes_chat(message: types.Message):
    if message.reply_to_message:
        quot = message.reply_to_message.text
        quotes.append(quot)
        bot.reply_to(message, f'–¶–∏—Ç–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {len(quotes)}')
        save_quotes()
    elif len(message.text.split()) > 1:
        try:
            _, num = message.text.split()
            num = int(num) - 1
            if 0 <= num < len(quotes):
                selected_q = quotes[num]
                bot.reply_to(message, f'{selected_q}')
            else:
                bot.reply_to(message, '–¶–∏—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
        except (ValueError, IndexError):
            bot.reply_to(message, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –í–æ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: /q <–Ω–æ–º–µ—Ä> (–Ω–∞–ø—Ä–∏–º–µ—Ä, /q 2).')
    else:
        if quotes:
            response = "\n".join([f"{i + 1}. {quote}" for i, quote in enumerate(quotes)])
            bot.reply_to(message, f"–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã:\n{response}")
        else:
            bot.reply_to(message, "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ü–∏—Ç–∞—Ç.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    load_user_data()
    load_quotes()
    bot.polling()