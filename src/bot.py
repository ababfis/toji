import telebot
from telebot import types
import random
import db, setings
import datetime
import json

bot = telebot.TeleBot(setings.BOT_TOKEN)
quotes = {}
user_data = {}
tea_stats = {}

def load_user_data():
    global user_data
    try:
        with open('user_data.json', 'r', encoding='utf-8') as file:
            user_data = json.load(file)
    except FileNotFoundError:
        user_data = {}

def save_user_data():
    with open('user_data.json', 'w', encoding='utf-8') as file:
        json.dump(user_data, file, ensure_ascii=False, indent=4)

def load_quotes():
    global quotes
    try:
        with open('quotes.json', 'r', encoding='utf-8') as file:
            quotes = json.load(file)
    except FileNotFoundError:
        quotes = {}

def save_quotes():
    with open('quotes.json', 'w', encoding='utf-8') as file:
        json.dump(quotes, file, ensure_ascii=False, indent=4)


def add_user(chat_id, user):
    global user_data 
    if chat_id not in user_data:
        user_data[chat_id] = []

    if not any(x['id'] == user.id for x in user_data[chat_id]):
        user_data[chat_id].append({'id': user.id, 'name': user.first_name or 'nn'}) 



@bot.my_chat_member_handler()

def drink_tea(chat_id, user_id, user_name):
    global tea_stats
    if chat_id not in tea_stats:
        tea_stats[chat_id] = {}

    if user_id not in tea_stats[chat_id]:
        tea_stats[chat_id][user_id] = {
            'name': user_name,
            'tea_drink': 0,
            'kettle_failed': 30
        }
    if tea_stats[chat_id][user_id]['kettle_failed'] > 0:
        if random.randint(1, 100) <= 25:
            tea_stats[chat_id][user_id]['kettle_failed'] -= 1
            if tea_stats[chat_id][user_id]['kettle_failed'] == 0:
                return f'–¢–´ –ë–´–õ –ò–ó–ë–†–ê–ù–ù–ò–ö–û–ú! –í–°–ï –î–£–ú–ê–õ–ò –¢–´ –ë–£–î–ï–®–¨ –ó–ê–©–ò–©–ê–¢–¨ –ù–ê–° –û–¢ –ñ–ï–ù–©–ò–ù –ê –ù–ï –ü–†–ò–ú–ö–ù–ï–®–¨ –ö –ù–ò–ú!'
            return f'—á–∞–π–Ω–∏–∫ –Ω–µ –≤—Å–∫–∏–ø–µ–ªü§¨—Å–º–æ—Ç—Ä–∏ —á—Ç–æ –±—ã –¥–µ–≤—É—à–∫–∏ –Ω–µ –ø–æ—è–≤–∏–ª–æ—Å—å. –æ—Å—Ç–∞–ª–æ—Å—å –Ω–µ –≤—ã–ø–µ—Ç—ã—Ö —á–∞–µ–≤: {tea_stats[chat_id][user_id]['kettle_failed']}'
        
        tea_amount = random.randint(1, 300)
        tea_stats[chat_id][user_id]['tea_drink'] += tea_amount
        if tea_amount <= 150:
            return (
                f'—Ç—ã –≤–∏–ø–∏–ª {tea_amount} —á–∞—è \n–≤—ã–ø–∏—Ç–æ —á–∞—è –≤—Å–µ–≥–æ: {tea_stats[chat_id][user_id]['tea_drink']}\n–æ—Å—Ç–∞–ª–æ—Å—å –Ω–µ –≤—ã–ø–∏—Ç—ã—Ö —á–∞–µ–≤: {tea_stats[chat_id][user_id]['kettle_failed']}'
            )
        else:
            return (
                f' –û–ú–ê–ì–ê–î –¢–´ –í–ò–ü–ò–õ –ê–ñ {tea_amount} –õ –ß–ê–Ø!!!\n–≤—ã–ø–∏—Ç–æ —á–∞—è –≤—Å–µ–≥–æ: {tea_stats[chat_id][user_id]['tea_drink']}\n–æ—Å—Ç–∞–ª–æ—Å—å –Ω–µ –≤—ã–ø–∏—Ç—ã—Ö —á–∞–µ–≤: {tea_stats[chat_id][user_id]['kettle_failed']}'
            )
    else:
        return f'—Ç–µ–±–µ —É–∂–µ –Ω–µ—Ç —Å–º—ã—Å–ª–∞ –ø–∏—Ç—å —á–∞–π —Å–∏—Ç—Ö...'

@bot.message_handler(func=lambda message: message.text.lower() == '–≤—ã–ø–∏—Ç—å —á–∞–π')
def tea(message: types.Message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    user_name = message.from_user.username
    response = drink_tea(chat_id, user_id, user_name)
    bot.reply_to(message, response)

# @bot.message_handler(func=lambda message: True)
# def save_user(message:types.Message):
#     chat_id = message.chat.id
#     user = message.from_user
#     add_user(chat_id, user)

@bot.my_chat_member_handler()
def check_admin(message:types.ChatMemberUpdated):
    if message.chat.type in ['group', 'supergroup']:
        old_status = message.old_chat_member.status
        new_status = message.new_chat_member.status
        if old_status != 'administrator' and new_status == 'administrator':
            bot.send_message(chat_id=message.chat.id, text= '–ú–£ –•–ê –•–ê –•–ê –•–ê –Ø –¢–ï–ü–ï–†–¨ –ê–î–ú–ò–ù –Ø –í–ê–° –ö–ê–ö –ì–û–î–ñ–û –†–ê–¢–ê–¢–ê–¢–ê–ê–¢–ê–ê–¢–¢\n–ê –ß–¢–û –ë–´ –£–ó–ù–ê–¢–¨ –í–°–ï –ú–û–ò –í–ò–î–´ –†–ê–°–°–¢–†–ï–õ–ê –ù–ê–ü–ò–®–ò /info')
    
@bot.message_handler(content_types=['video', 'animation'])
def media(message: types.Message):
    gif = r'src\GIF\video_2024-11-17_11-43-49.mp4'
    with open(gif, '+rb') as file:
        bot.send_animation(message.chat.id, file)

@bot.message_handler(func=lambda message:True, content_types=['text', 'sticker', 'photo', 'video', 'audio', 'document', 'location', 'contact', 'video_note', 'voice'])
def all_message_handler(message:types.Message):
    user_id = str(message.chat.id)
    today = datetime.date.today()
    week = datetime.date.today().isocalendar()[1]
    month = datetime.date.today().month
    user_info = 


@bot.message_handler(commands=['q'])
def quotes_chat(message: types.Message):
    chat_id = message.chat.id
    if message.reply_to_message:
        if chat_id not in quotes:
            quotes[chat_id] = []
        quot = message.reply_to_message.text
        quotes[chat_id].append(quot)
        bot.reply_to(message, f'—Ü–∏—Ç–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {len(quotes[chat_id])}')
    elif len(message.text.split()) > 1:
        try:
            a, num = message.text.split()
            num = int(num) - 1
            if chat_id in quotes and 0 <= num <len(quotes[chat_id]):
                selected_q = quotes[chat_id][num]
                bot.reply_to(message, f'{selected_q}')
            else:
                bot.reply_to(message, '—Ü–∏—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
        except (ValueError, IndexError):
            bot.reply_to(message, f'—É —Ç–µ–±—è –∞—É—Ç–∏–∑–º? –≤–æ—Ç —Ñ–æ—Ä–º–∞—Ç –≥–µ–Ω–∏–π: /q <–Ω–æ–º–µ—Ä> (–Ω–∞–ø—Ä–∏–º–µ—Ä, /q 2).')
    else:
        if chat_id in quotes and quotes[chat_id]:
            response = "\n".join([f"{i + 1}. {quote}" for i, quote in enumerate(quotes[chat_id])])
            bot.reply_to(message, f"–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã:\n{response}")
        else:
            bot.reply_to(message, "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ü–∏—Ç–∞—Ç.")

bot.polling()